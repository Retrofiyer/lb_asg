name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy-qa:
    if: ${{ github.event.workflow_run.event.pull_request.base.ref == 'QA' }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to QA Instance
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOSTSQA }}
          username: ubuntu
          key: ${{ secrets.EC2_KEYQA }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              sudo systemctl restart docker
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lb_asg:qa
            sudo docker stop $(docker ps -q) || true
            sudo docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/lb_asg:qa

  deploy-prod:
    if: ${{ github.event.workflow_run.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Production Instance
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOSTPROD }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              sudo systemctl restart docker
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lb_asg:prod
            sudo docker stop $(docker ps -q) || true
            sudo docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/lb_asg:prod